/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <android/log.h>
/* Header for class com_durongze_jni_CallC */
#include <stdio.h>
#include <string.h>
#include <errno.h>

#ifndef _Included_com_durongze_jni_CallC
#define _Included_com_durongze_jni_CallC

#ifdef __cplusplus
#if __cplusplus
extern "C" {
#endif
#endif

#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, "DYZ", __VA_ARGS__)
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG , "DYZ", __VA_ARGS__)
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO , "DYZ", __VA_ARGS__)
#define LOGW(...) __android_log_print(ANDROID_LOG_WARN , "DYZ", __VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR , "DYZ", __VA_ARGS__)

void TestMain()
{
    int i;
    signed char c;
    short s;
	float f;

	c = -1;
    f = (float)c;
    LOGE("1. c:0x%x\n", c);
    LOGE("1. f:%lf\n", f);
    c = 0;
    f = c;
    LOGE("2. c:0x%x\n", c);
    LOGE("2. f:%lf\n", f);
    c = -1;
	f = c;
    for (int i = 0; i < 1000; i++){
        f = f + c;
    }
	LOGI("3. f + c:%lf\n", f);
	i = -1;
	f = i;
    for (int idx = 0; idx < 1000; idx ++){
        f = f + i;
    }
    LOGI("3. f + i:%lf\n", f);
	
	c = 0;
    i = 1;
    f = (!c)*(i);
    for (int idx = 0; idx < 5; idx++){
        f = f + f;
    }
    LOGE("4. f:%lf\n", f);
    
    s = -1;
    f = s;
    LOGE("5. f:%lf\n", f);
}
/*
 * Class:     com_durongze_jni_CallC
 * Method:    CInterface
 * Signature: ([Ljava/lang/String;[I[FI)[Ljava/lang/String;
 */
 //                            Java_com_durongze_jni_CallC_CInterface
 //                            Java_com_example_myapplication_MainActivity_CInterface
JNIEXPORT jobjectArray JNICALL Java_com_durongze_jni_JavaCallCpp_GenUserList
  (JNIEnv *env, jobject, jobjectArray names, jintArray ages, jfloatArray heights, jint num)
  {
      jboolean b = false;
      jobjectArray result;
      jclass intArrCls = env->FindClass("java/lang/String");
      result = env->NewObjectArray(num, intArrCls, NULL);
      int idx = 0;
      jint *as = env->GetIntArrayElements(ages, 0);
      int asLen = env->GetArrayLength(ages);
      jfloat *hs = env->GetFloatArrayElements(heights, 0);
      int hsLen = env->GetArrayLength(heights);
      for (idx = 0; idx < num; ++idx) {
        jstring ns = static_cast<jstring>(env->GetObjectArrayElement(names, num - idx - 1));
        const char* pns = env->GetStringUTFChars(ns, &b);
        printf("%s:       names[%d]:%s,         ages[%d]:%d,    heights[%d]:%lf\n",
            __FUNCTION__, idx, pns, idx, as[idx], idx, hs[idx]);
        env->SetObjectArrayElement(result, idx, ns);
		env->ReleaseStringUTFChars(ns, pns);
      }
      env->ReleaseIntArrayElements(ages, as, 0);
      env->ReleaseFloatArrayElements(heights, hs, 0);
      return result;
  }

JNIEXPORT jint JNICALL Java_com_durongze_jni_JavaCallCpp_WriteCtxToFile
  (JNIEnv *env, jobject, jstring fileName)
  {
      TestMain();
	  char buf[64] = {"xxxxxxxxxxxxxxx"}; 
	  jboolean b = false;
	  const char* fn = env->GetStringUTFChars(fileName, &b);
      FILE* fp = fopen(fn, "w+");
      if (fp != NULL) {
		  fwrite(buf, strlen(buf), 1, fp);
		  fclose(fp);
      }
	  env->ReleaseStringUTFChars(fileName, fn);
      return 999;
  }
  JNIEXPORT jint JNICALL Java_com_durongze_jni_JavaCallCpp_CppCallJava
  (JNIEnv *env, jobject, jstring className, jstring funcName)
  {
	  jboolean b = false;
	  const char* cn = env->GetStringUTFChars(className, &b);
	  const char* fn = env->GetStringUTFChars(funcName, &b);
	  jclass jClass = env->FindClass(cn);
	  jobject jObject = env->AllocObject(jClass);
	  jmethodID jMethodId = env->GetMethodID(jClass, fn, "()V");
	  env->CallVoidMethod(jObject, jMethodId);
	  env->ReleaseStringUTFChars(className, cn);
	  env->ReleaseStringUTFChars(funcName, fn);
      return 888;
  }
#ifdef __cplusplus
#if __cplusplus
}
#endif
#endif

#endif
